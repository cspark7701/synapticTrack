name: synapticTrack CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.13']

    env:
      JuTrack_Path: ${{ github.workspace }}/external/JuTrack.jl

    steps:
    - name: Checkout synapticTrack repo
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install git+https://github.com/JuliaPy/pyjulia.git

    - name: Set up Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: '1.10'

    - name: Clone JuTrack.jl externally
      run: |
        mkdir -p external
        git clone https://github.com/MSU-Beam-Dynamics/JuTrack.jl.git external/JuTrack.jl

    - name: Install and initialize PyJulia
      run: |
        # First, install PyCall in Julia's default environment
        julia -e '
          import Pkg;
          Pkg.add("PyCall");
          Pkg.build("PyCall");
          Pkg.precompile();
        '

        # Now activate and prepare the JuTrack.jl environment
        julia -e '
          import Pkg;
          Pkg.activate("external/JuTrack.jl");
          Pkg.instantiate();
          Pkg.precompile();
        '

        # Initialize PyJulia (must come after global PyCall install)
        python -c "from julia.api import Julia; Julia(compiled_modules=False)"

    - name: Run Pytest
      run: |
        pytest tests/ --tb=short -v

